{"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"HRmpgri6iXuZ"}},{"cell_type":"code","source":["#multiplication table\n","def multiplication_table(n):\n","  for i in range(1, 21):\n","      print(f\"{n}×{i} = {n*i}\")\n","num = int(input(\"Enter a number \"))\n","multiplication_table(num)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GWVP_fQyiZRz","executionInfo":{"status":"ok","timestamp":1755871600097,"user_tz":0,"elapsed":4334,"user":{"displayName":"Bright Joseph Addae","userId":"12628835203212262961"}},"outputId":"35c5e564-5b87-4b8f-bf49-10be25478858"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number 3\n","3×1 = 3\n","3×2 = 6\n","3×3 = 9\n","3×4 = 12\n","3×5 = 15\n","3×6 = 18\n","3×7 = 21\n","3×8 = 24\n","3×9 = 27\n","3×10 = 30\n","3×11 = 33\n","3×12 = 36\n","3×13 = 39\n","3×14 = 42\n","3×15 = 45\n","3×16 = 48\n","3×17 = 51\n","3×18 = 54\n","3×19 = 57\n","3×20 = 60\n"]}]},{"cell_type":"code","source":["import random\n","\n","def guessing_game():\n","    \"\"\"\n","    A simple number guessing game.\n","    \"\"\"\n","    # Generate a random number between 1 and 100\n","    secret_number = random.randint(1, 100)\n","\n","    # Set the number of attempts\n","    max_attempts = 7\n","    attempts = 0\n","\n","    print(\"Welcome to the Guessing Game!\")\n","    print(\"I have selected a number between 1 and 100.\")\n","    print(f\"You have {max_attempts} attempts to guess it.\")\n","\n","    while attempts < max_attempts:\n","        try:\n","            # Get the user's guess\n","            guess = int(input(f\"Attempt {attempts + 1}/{max_attempts}: Enter your guess: \"))\n","\n","            # Check if the guess is within the valid range\n","            if not 1 <= guess <= 100:\n","                print(\"Your guess is out of range. Please guess a number between 1 and 100.\")\n","                continue\n","\n","            attempts += 1\n","\n","            # Check the guess\n","            if guess < secret_number:\n","                print(\"Too low! Try again.\")\n","            elif guess > secret_number:\n","                print(\"Too high! Try again.\")\n","            else:\n","                print(f\"Congratulations! You guessed the number {secret_number} correctly in {attempts} attempts.\")\n","                return # Exit the function if the guess is correct\n","\n","        except ValueError:\n","            print(\"Invalid input. Please enter a valid number.\")\n","\n","    # This part of the code runs if the loop finishes (user runs out of attempts)\n","    print(f\"\\nGame over! You've used all {max_attempts} attempts.\")\n","    print(f\"The secret number was {secret_number}.\")\n","\n","# Run the game\n","if __name__ == \"__main__\":\n","    guessing_game()"],"metadata":{"id":"FD4CP69TcElb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"CNzHSMcAcmLj"}},{"cell_type":"code","source":["class ReservoirProperty:\n","    \"\"\"\n","    A base class for calculating reservoir properties.\n","    \"\"\"\n","    def __init__(self, porosity, area, thickness):\n","        if not all(isinstance(i, (int, float)) and i > 0 for i in [porosity, area, thickness]):\n","            raise ValueError(\"All inputs must be positive numbers.\")\n","        self.porosity = porosity\n","        self.area = area\n","        self.thickness = thickness\n","\n","    def calculate(self):\n","        \"\"\"\n","        A placeholder method for calculation, to be overridden by child classes.\n","        \"\"\"\n","        raise NotImplementedError(\"Subclass must implement abstract method.\")\n","\n","    def __str__(self):\n","        return f\"Reservoir properties: Porosity={self.porosity}, Area={self.area}, Thickness={self.thickness}\"\n","\n","\n","class ReservoirVolume(ReservoirProperty):\n","    \"\"\"\n","    Calculates the pore volume of a reservoir.\n","    Formula: Pore Volume = Area * Thickness * Porosity\n","    \"\"\"\n","    def __init__(self, porosity, area, thickness):\n","        super().__init__(porosity, area, thickness)\n","\n","    def calculate(self):\n","        return self.area * self.thickness * self.porosity\n","\n","\n","class FluidInPlace(ReservoirProperty):\n","    \"\"\"\n","    A base class for calculating fluid in place (oil or gas).\n","    Demonstrates polymorphism with the `calculate` method.\n","    \"\"\"\n","    def __init__(self, porosity, area, thickness, fluid_saturation):\n","        super().__init__(porosity, area, thickness)\n","        if not isinstance(fluid_saturation, (int, float)) or not 0 <= fluid_saturation <= 1:\n","            raise ValueError(\"Fluid saturation must be a number between 0 and 1.\")\n","        self.fluid_saturation = fluid_saturation\n","\n","    def calculate(self, formation_volume_factor):\n","        \"\"\"\n","        Calculates the fluid in place using the general formula.\n","        Formula: Fluid In Place = Area * Thickness * Porosity * Fluid Saturation / Formation Volume Factor\n","        \"\"\"\n","        try:\n","            return (self.area * self.thickness * self.porosity * self.fluid_saturation) / formation_volume_factor\n","        except ZeroDivisionError:\n","            print(\"Error: Formation Volume Factor cannot be zero.\")\n","            return 0\n","\n","\n","class GasInPlace(FluidInPlace):\n","    \"\"\"\n","    Calculates the Gas Initially In Place (GIIP).\n","    \"\"\"\n","    def __init__(self, porosity, area, thickness, gas_saturation):\n","        super().__init__(porosity, area, thickness, gas_saturation)\n","\n","    # Note: Overriding the calculate method to provide a more specific signature is not strictly necessary here,\n","    # but it demonstrates a common use of polymorphism.\n","    def calculate(self, gas_formation_volume_factor):\n","        \"\"\"\n","        Polymorphic method for calculating GIIP.\n","        \"\"\"\n","        return super().calculate(gas_formation_volume_factor)\n","\n","\n","class OilInPlace(FluidInPlace):\n","    \"\"\"\n","    Calculates the Oil Initially In Place (OIIP).\n","    \"\"\"\n","    def __init__(self, porosity, area, thickness, oil_saturation):\n","        super().__init__(porosity, area, thickness, oil_saturation)\n","\n","    def calculate(self, oil_formation_volume_factor):\n","        \"\"\"\n","        Polymorphic method for calculating OIIP.\n","        \"\"\"\n","        return super().calculate(oil_formation_volume_factor)\n","\n","\n","class Permeability(object):\n","    \"\"\"\n","    Calculates permeability using a simplified version of Darcy's Law.\n","    Formula: k = (q * mu * L) / (A * delta_p)\n","    \"\"\"\n","    def __init__(self, flow_rate, viscosity, length, area, pressure_drop):\n","        if not all(isinstance(i, (int, float)) and i > 0 for i in [flow_rate, viscosity, length, area, pressure_drop]):\n","            raise ValueError(\"All inputs must be positive numbers.\")\n","        self.flow_rate = flow_rate\n","        self.viscosity = viscosity\n","        self.length = length\n","        self.area = area\n","        self.pressure_drop = pressure_drop\n","\n","    def calculate(self):\n","        try:\n","            return (self.flow_rate * self.viscosity * self.length) / (self.area * self.pressure_drop)\n","        except ZeroDivisionError:\n","            print(\"Error: Area or pressure drop cannot be zero.\")\n","            return 0\n","\n","\n","class WaterSaturation(object):\n","    \"\"\"\n","    Calculates water saturation.\n","    Formula: Sw = Water Volume / Pore Volume\n","    \"\"\"\n","    def __init__(self, water_volume, pore_volume):\n","        if not all(isinstance(i, (int, float)) and i > 0 for i in [water_volume, pore_volume]):\n","            raise ValueError(\"All inputs must be positive numbers.\")\n","        self.water_volume = water_volume\n","        self.pore_volume = pore_volume\n","\n","    def calculate(self):\n","        try:\n","            return self.water_volume / self.pore_volume\n","        except ZeroDivisionError:\n","            print(\"Error: Pore volume cannot be zero.\")\n","            return 0\n","\n","\n","# --- Example Usage and Error Handling ---\n","# 1. Reservoir Volume\n","try:\n","    reservoir = ReservoirVolume(porosity=0.25, area=1000, thickness=50)\n","    print(f\"Reservoir Volume: {reservoir.calculate()} ft³\")\n","except ValueError as e:\n","    print(f\"Error: {e}\")\n","\n","# 2. Gas in Place\n","try:\n","    giip_calc = GasInPlace(porosity=0.2, area=500, thickness=40, gas_saturation=0.8)\n","    gas_fvf = 0.005 # bbl/scf\n","    giip = giip_calc.calculate(gas_fvf)\n","    print(f\"Gas Initially In Place: {giip} scf\")\n","except (ValueError, ZeroDivisionError) as e:\n","    print(f\"Error: {e}\")\n","\n","# 3. Oil in Place\n","try:\n","    oiip_calc = OilInPlace(porosity=0.3, area=1500, thickness=70, oil_saturation=0.6)\n","    oil_fvf = 1.2 # bbl/stb\n","    oiip = oiip_calc.calculate(oil_fvf)\n","    print(f\"Oil Initially In Place: {oiip} stb\")\n","except (ValueError, ZeroDivisionError) as e:\n","    print(f\"Error: {e}\")\n","\n","# 4. Permeability (Darcy's Law)\n","try:\n","    perm_calc = Permeability(flow_rate=10, viscosity=5, length=100, area=20, pressure_drop=50)\n","    permeability = perm_calc.calculate()\n","    print(f\"Permeability: {permeability} Darcy\")\n","except ValueError as e:\n","    print(f\"Error: {e}\")\n","\n","# 5. Water Saturation\n","try:\n","    water_sat_calc = WaterSaturation(water_volume=200, pore_volume=1000)\n","    water_saturation = water_sat_calc.calculate()\n","    print(f\"Water Saturation: {water_saturation}\")\n","except ValueError as e:\n","    print(f\"Error: {e}\")\n","\n","# --- Demonstrating Error Handling ---\n","# Example 1: Passing a negative value to a constructor (ValueError)\n","print(\"\\n--- Testing ValueError ---\")\n","try:\n","    bad_object = ReservoirVolume(porosity=0.25, area=-1000, thickness=50)\n","except ValueError as e:\n","    print(f\"Caught an expected error: {e}\")\n","\n","# Example 2: Division by zero for OIIP\n","print(\"\\n--- Testing ZeroDivisionError ---\")\n","try:\n","    oiip_calc = OilInPlace(porosity=0.3, area=1500, thickness=70, oil_saturation=0.6)\n","    oiip = oiip_calc.calculate(0)  # Pass 0 to the Formation Volume Factor\n","except ZeroDivisionError as e:\n","    # This block won't be reached because the FluidInPlace class handles it internally\n","    print(f\"Caught an expected error: {e}\")"],"metadata":{"id":"esiHW_PgcnPa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"BP3SqmUqdMOu"}},{"cell_type":"code","source":["ASSIGNMENT 1\n","#Task1\n","# a. Create variables of these types: Integer, Float, String, and Boolean\n","my_integer = 10\n","my_float = 9.99\n","my_string = \"Hello, Python\"\n","my_boolean = True\n","\n","# b. Print each variable with its type using the type() function\n","print(f\"Variable: {my_integer}, Type: {type(my_integer)}\")\n","print(f\"Variable: {my_float}, Type: {type(my_float)}\")\n","print(f\"Variable: {my_string}, Type: {type(my_string)}\")\n","print(f\"Variable: {my_boolean}, Type: {type(my_boolean)}\")\n","\n","#Task2\n","# a. Convert a float 19.99 to an integer\n","float_value = 19.99\n","integer_value = int(float_value)\n","print(f\"Original value: {float_value}, Converted to integer: {integer_value}, Type: {type(integer_value)}\")\n","\n","# b. Convert an integer 50 to a string\n","integer_value_2 = 50\n","string_value = str(integer_value_2)\n","print(f\"Original value: {integer_value_2}, Converted to string: {string_value}, Type: {type(string_value)}\")\n","\n","# c. Convert a string \"50\" to a float\n","string_value_2 = \"50\"\n","float_value_2 = float(string_value_2)\n","print(f\"Original value: {string_value_2}, Converted to float: {float_value_2}, Type: {type(float_value_2)}\")\n","\n","#Task3\n","# a. Takes the user's first and last name as input\n","first_name = input(\"Enter your first name: \")\n","last_name = input(\"Enter your last name: \")\n","\n","# b. Prints a greeting message\n","print(f\"Hello, {first_name} {last_name}!\")\n","\n","#Task4\n","age = 20\n","\n","# Fixed code\n","print(f\"You are {age} years old.\")\n","\n","\n","# Task 5\n","# Ask the user for their favorite word\n","favorite_word = input(\"Enter your favorite word: \")\n","\n","# Ask the user how many times to repeat the word\n","num_repeats = int(input(\"How many times should I repeat it? \"))\n","\n","# Create a list with the favorite word repeated the specified number of times\n","word_list = [favorite_word] * num_repeats\n","\n","# Join the list elements with spaces and print the result\n","print(\" \".join(word_list))\n","\n","\n","ASSIGNMENT 2\n","\n","def task1(s):\n","  \"\"\"\n","  Converts all uppercase letters in a string to lowercase.\n","  \"\"\"\n","  return s.lower()\n","\n","# Examples from the prompt\n","print(f\"Input: 'Hello' -> Output: {task1('Hello')}\")\n","print(f\"Input: 'here' -> Output: {task1('here')}\")\n","print(f\"Input: 'LOVELY' -> Output: {task1('LOVELY')}\")\n","\n","def task2(s):\n","  \"\"\"\n","  Swaps the case of all letters in a string.\n","  \"\"\"\n","  return s.swapcase()\n","\n","# Example from the prompt\n","print(f\"Input: 'HeLLo WoRLd' -> Output: {task2('HeLLo WoRLd')}\")\n","print(f\"Input: 'HELLO wOrlD' -> Output: {task2('HELLO wOrlD')}\")\n","\n","def task3(s):\n","  \"\"\"\n","  Removes all uppercase letters from a string.\n","  \"\"\"\n","  result = \"\"\n","  for char in s:\n","    if not char.isupper():\n","      result += char\n","  return result\n","\n","# Example from the prompt\n","print(f\"Input: 'HelloWorld' -> Output: {task3('HelloWorld')}\")\n","print(f\"Input: 'elloorld' -> Output: {task3('elloorld')}\")\n","\n","def task4(s):\n","  \"\"\"\n","  Counts the number of uppercase and lowercase letters in a string.\n","  \"\"\"\n","  uppercase_count = 0\n","  lowercase_count = 0\n","  for char in s:\n","    if char.isupper():\n","      uppercase_count += 1\n","    elif char.islower():\n","      lowercase_count += 1\n","  return f\"Uppercase: {uppercase_count}, Lowercase: {lowercase_count}\"\n","\n","# Example from the prompt\n","print(f\"Input: 'EngiNEER' -> Output: {task4('EngiNEER')}\")\n","\n","def task5(s):\n","  \"\"\"\n","  Removes all characters from a string that are not English letters.\n","  \"\"\"\n","  result = \"\"\n","  for char in s:\n","    if char.isalpha():\n","      result += char\n","  return result\n","\n","# Example from the prompt\n","print(f\"Input: 'Data-Driven@2025!' -> Output: {task5('Data-Driven@2025!')}\")\n","\n","import math\n","\n","def task6(a, b, c):\n","  \"\"\"\n","  Calculates the area of a triangle using Heron's formula.\n","  \"\"\"\n","  # Calculate the semi-perimeter\n","  s = (a + b + c) / 2\n","\n","  # Calculate the area using Heron's formula\n","  area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n","  return area\n","\n","# Example from the prompt\n","print(f\"Input: a=3, b=4, c=5 -> Output: {task6(3, 4, 5)}\")\n","\n","def task7(names):\n","  \"\"\"\n","  Prints a list of names in a neat, left-justified table.\n","  \"\"\"\n","  print(\"Names:\")\n","  print(\"-\" * 20)  # Print a separator line\n","  for name in names:\n","    print(name.ljust(18)) # Adjust the width as needed\n","\n","# Example usage with a sample list of names\n","names_list = [\"John\", \"Jane\", \"Michael\", \"Emily\"]\n","task7(names_list)\n","\n","import string\n","\n","def task8(s):\n","  \"\"\"\n","  Cleans a string by:\n","  i. Removing leading/trailing whitespace\n","  ii. Replacing all punctuation with an empty string\n","  iii. Removing all spaces\n","  \"\"\"\n","  # i. Remove leading/trailing whitespace using strip()\n","  cleaned_s = s.strip()\n","\n","  # ii. Remove all punctuation\n","  translator = str.maketrans('', '', string.punctuation)\n","  cleaned_s = cleaned_s.translate(translator)\n","\n","  # iii. Remove all spaces\n","  cleaned_s = cleaned_s.replace(\" \", \"\")\n","\n","  return cleaned_s\n","\n","# Example from the prompt\n","print(f\"Input: ' Hello, World! ' -> Output: '{task8(' Hello, World! ')}'\")"],"metadata":{"id":"FjJ66Z_rdMws"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvP2YsQAyE5HDluCUiHRXM"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}